// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------- //
// PIOMaxSquareWave //
// ---------------- //

#define PIOMaxSquareWave_wrap_target 1
#define PIOMaxSquareWave_wrap 2

static const uint16_t PIOMaxSquareWave_program_instructions[] = {
    0xe081, //  0: set    pindirs, 1
            //     .wrap_target
    0xe001, //  1: set    pins, 1
    0xe000, //  2: set    pins, 0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program PIOMaxSquareWave_program = {
    .instructions = PIOMaxSquareWave_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config PIOMaxSquareWave_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + PIOMaxSquareWave_wrap_target, offset + PIOMaxSquareWave_wrap);
    return c;
}

static inline void PIOMaxSquareWave_program_init(PIO pio, uint sm, uint offset, uint pin, float clk_div){ //Program to initialize the PIO
    pio_sm_config c = PIOMaxSquareWave_program_get_default_config(offset); //Get default configurations for the PIO state machine
    sm_config_set_set_pins(&c, pin, 1); //Set the state machine configurations on the given pin
    sm_config_set_clkdiv(&c, clk_div); //Set the state machine clock divider
    pio_gpio_init(pio, pin); //Setup the function select for a GPIO to use output from the given PIO instance
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true); //Use a state machine to set the same pin direction for multiple consecutive pins for the PIO instance
    pio_sm_init(pio, sm, offset, &c); //Resets the state machine to a consistent state, and configures it
    pio_sm_set_enabled(pio, sm, true); //Enable or disable a PIO state machine
}

#endif
